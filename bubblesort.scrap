//Constants
SYMBOL		LIST_SIZE		32

//Variable addresses
SYMBOL		SIZE			33
SYMBOL		TEMP			34
SYMBOL		CNTR			35
SYMBOL		CNTR2			36
SYMBOL		CNTR2_p1		37
SYMBOL		LOOP_END		38
SYMBOL		A_1				39
SYMBOL		A_2				40

MAIN
	LOADi		LIST_SIZE
	STOREA		SIZE
	//Init list
	LOADi		6
	STOREA		0
	LOADi		24
	STOREA		1
	LOADi		52
	STOREA		2
	LOADi		6
	STOREA		3
	LOADi		2
	STOREA		4
	LOADi		31
	STOREA		5
	LOADi		48
	STOREA		6
	LOADi		58
	STOREA		7
	LOADi		14
	STOREA		8
	LOADi		57
	STOREA		9
	LOADi		62
	STOREA		10
	LOADi		53
	STOREA		11
	LOADi		9
	STOREA		12
	LOADi		41
	STOREA		13
	LOADi		1
	STOREA		14
	LOADi		0
	STOREA		15
	LOADi		11
	STOREA		16
	LOADi		49
	STOREA		17
	LOADi		33
	STOREA		18
	LOADi		36
	STOREA		19
	LOADi		42
	STOREA		20
	LOADi		47
	STOREA		21
	LOADi		45
	STOREA		22
	LOADi		10
	STOREA		23
	LOADi		40
	STOREA		24
	LOADi		50
	STOREA		25
	LOADi		62
	STOREA		26
	LOADi		4
	STOREA		27
	LOADi		34 #35
	STOREA		28
	LOADi		48
	STOREA		29
	LOADi		26
	STOREA		30
	LOADi		19
	STOREA		31
	CALL		SORT
	
	LOADi		0
	STOREA		CNTR
OUTPUT_LOOP
	LOADi		63
	STOREA		63
	NOP
	NOP
	NOP
	NOP
	NOP
	
	LOADm		CNTR
	LOADm
	LOAD
	STOREA		63
	LOADi		22
	STOREA		TEMP
DELAY_LOOP
	LOADi		63
	qADD		TEMP
	STORE
	JNZ			DELAY_LOOP
	
	LOADi		1
	ADD			CNTR
	STORE
	qEQL		SIZE
	JZ			OUTPUT_LOOP
	
	LOADi		63
	STOREA		63
	JMP			HALT
	
SORT
	LOADi		0
	STOREA		CNTR
SORT_LOOP
	LOADi		SIZE
	qSUB		CNTR
	STORE		LOOP_END
	LOADi		63
	qADD
	STORE
	LOADi		0
	STOREA		CNTR2
SORT_LOOP2
	LOADm		CNTR2
	LOADm
	LOAD
	STOREA		A_1				// A_1 = a[j]
	
	LOADi		1				// A_2 = a[j + 1]
	qADD		CNTR2
	STORE		CNTR2_p1
	LOADm
	LOAD
	STOREA		A_2
	
	LOAD		A_1
	qMAG		A_2
	JZ			DONT_SWAP
	
	LOAD		A_2				// Swap values
	LOADm		CNTR2
	LOADm
	STOREA
	
	LOAD		A_1
	LOADm		CNTR2_p1
	LOADm
	STOREA
	
DONT_SWAP
	
	LOADi		1
	ADD			CNTR2
	STORE
	qEQL		LOOP_END
	JZ			SORT_LOOP2
	
	LOADi		1
	ADD			CNTR
	STORE
	OUT
	qEQL		SIZE
	JZ			SORT_LOOP
	
	RETURN
	
HALT
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	JMP			HALT